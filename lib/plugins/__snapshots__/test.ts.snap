export const snapshot = {};

snapshot[`Serde Derive Plugin > emit array-0.json 1`] = `
"pub type Root = Vec<f64>;

"
`;

snapshot[`Serde Derive Plugin > emit array-1.json 1`] = `
"#[derive(serde::Serialize, serde::Deserialize)]
pub struct RootElement0 {
  key1: String,
  key2: String,
}

pub type Root = Vec<RootElement0>;

"
`;

snapshot[`Serde Derive Plugin > emit array-2.json 1`] = `
"#[derive(serde::Serialize, serde::Deserialize)]
pub struct RootElement0 {
  key1: String,
  key2: String,
  optional: Option<String>,
}

pub type Root = Vec<RootElement0>;

"
`;

snapshot[`Serde Derive Plugin > emit array-3.json 1`] = `
"pub type Root = Vec<std::collections::HashMap<String, String>>;

"
`;

snapshot[`Serde Derive Plugin > emit array-4.json 1`] = `
"#[derive(serde::Serialize, serde::Deserialize)]
#[serde(untagged)]
pub enum Primitive2 {
  Number(f64),
  String(String),
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct Struct5 {
  key4: String,
}

#[derive(serde::Serialize, serde::Deserialize)]
#[serde(untagged)]
pub enum RootElementEntry1 {
  Primitive(Primitive2),
  Struct(Struct5),
}

pub type Root = Vec<std::collections::HashMap<String, RootElementEntry1>>;

"
`;

snapshot[`Serde Derive Plugin > emit boolean-false.json 1`] = `
"pub type Root = bool;

"
`;

snapshot[`Serde Derive Plugin > emit boolean-true.json 1`] = `
"pub type Root = bool;

"
`;

snapshot[`Serde Derive Plugin > emit map-0.json 1`] = `
"pub type Root = std::collections::HashMap<String, f64>;

"
`;

snapshot[`Serde Derive Plugin > emit map-1.json 1`] = `
"pub type Root = std::collections::HashMap<String, f64>;

"
`;

snapshot[`Serde Derive Plugin > emit map-2.json 1`] = `
"pub type Root = std::collections::HashMap<String, f64>;

"
`;

snapshot[`Serde Derive Plugin > emit null.json 1`] = `
"pub type Root = ();

"
`;

snapshot[`Serde Derive Plugin > emit number-negative.json 1`] = `
"pub type Root = f64;

"
`;

snapshot[`Serde Derive Plugin > emit number-positive.json 1`] = `
"pub type Root = f64;

"
`;

snapshot[`Serde Derive Plugin > emit number-zero.json 1`] = `
"pub type Root = f64;

"
`;

snapshot[`Serde Derive Plugin > emit object-0.json 1`] = `
"#[derive(serde::Serialize, serde::Deserialize)]
pub struct Root {
  key: String,
}

"
`;

snapshot[`Serde Derive Plugin > emit object-1.json 1`] = `
"#[derive(serde::Serialize, serde::Deserialize)]
pub struct Root {
  key: f64,
}

"
`;

snapshot[`Serde Derive Plugin > emit object-2.json 1`] = `
"#[derive(serde::Serialize, serde::Deserialize)]
pub struct Root {
  key: bool,
}

"
`;

snapshot[`Serde Derive Plugin > emit object-3.json 1`] = `
"#[derive(serde::Serialize, serde::Deserialize)]
pub struct Root {
  key: Vec<String>,
}

"
`;

snapshot[`Serde Derive Plugin > emit object-4.json 1`] = `
"#[derive(serde::Serialize, serde::Deserialize)]
pub struct Key0 {
  key: String,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct Root {
  key: Key0,
}

"
`;

snapshot[`Serde Derive Plugin > emit object-5.json 1`] = `
"#[derive(serde::Serialize, serde::Deserialize)]
pub struct Root {
  key: (),
}

"
`;

snapshot[`Serde Derive Plugin > emit object-6.json 1`] = `
"#[derive(serde::Serialize, serde::Deserialize)]
pub struct KeyElement1 {
  key: String,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct Root {
  key: Vec<KeyElement1>,
}

"
`;

snapshot[`Serde Derive Plugin > emit object-7.json 1`] = `
"#[derive(serde::Serialize, serde::Deserialize)]
#[serde(untagged)]
pub enum KeyElement1 {
  Boolean(bool),
  String(String),
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct Root {
  key: Vec<KeyElement1>,
}

"
`;

snapshot[`Serde Derive Plugin > emit object-8.json 1`] = `
"#[derive(serde::Serialize, serde::Deserialize)]
pub struct Key8 {
  key1: String,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct Root {
  key1: bool,
  key2: bool,
  key3: (),
  key4: f64,
  key5: f64,
  key6: String,
  key7: Vec<f64>,
  key8: Key8,
}

"
`;

snapshot[`Serde Derive Plugin > parses regression-0-option-option.json 1`] = `
"#[derive(serde::Serialize, serde::Deserialize)]
pub struct ANDElement3 {
  facing: Option<String>,
  slot_0_occupied: Option<String>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct MultipartElement1 {
  AND: Vec<ANDElement3>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct Root {
  multipart: Vec<MultipartElement1>,
}

"
`;

snapshot[`Serde Derive Plugin > Multiple-Files > datapack/blockstates 1`] = `
"#[derive(serde::Serialize, serde::Deserialize)]
pub struct ArrayElement5 {
  model: String,
  uvlock: Option<bool>,
  weight: Option<f64>,
  x: Option<f64>,
  y: Option<f64>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct Struct15 {
  model: String,
  uvlock: Option<bool>,
  x: Option<f64>,
  y: Option<f64>,
}

#[derive(serde::Serialize, serde::Deserialize)]
#[serde(untagged)]
pub enum Apply3 {
  Array(Vec<ArrayElement5>),
  Struct(Struct15),
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct TElement29 {
  facing: Option<String>,
  slot_0_occupied: Option<String>,
  slot_1_occupied: Option<String>,
  slot_2_occupied: Option<String>,
  slot_3_occupied: Option<String>,
  slot_4_occupied: Option<String>,
  slot_5_occupied: Option<String>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct TElement66 {
  east: Option<String>,
  north: Option<String>,
  south: Option<String>,
  up: Option<String>,
  west: Option<String>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct T24 {
  age: Option<String>,
  AND: Option<Vec<TElement29>>,
  down: Option<String>,
  east: Option<String>,
  facing: Option<String>,
  flower_amount: Option<String>,
  has_bottle_0: Option<String>,
  has_bottle_1: Option<String>,
  has_bottle_2: Option<String>,
  leaves: Option<String>,
  level: Option<String>,
  north: Option<String>,
  OR: Option<Vec<TElement66>>,
  south: Option<String>,
  up: Option<String>,
  west: Option<String>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct TElement2 {
  apply: Apply3,
  when: Option<T24>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct ArrayElement87 {
  model: String,
  x: Option<f64>,
  y: Option<f64>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct Struct93 {
  model: String,
  uvlock: Option<bool>,
  x: Option<f64>,
  y: Option<f64>,
}

#[derive(serde::Serialize, serde::Deserialize)]
#[serde(untagged)]
pub enum TEntry85 {
  Array(Vec<ArrayElement87>),
  Struct(Struct93),
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct Root {
  multipart: Option<Vec<TElement2>>,
  variants: Option<std::collections::HashMap<String, TEntry85>>,
}

"
`;

snapshot[`Serde Derive Plugin > Multiple-Files > datapack/models/block 1`] = `
"#[derive(serde::Serialize, serde::Deserialize)]
pub struct T5 {
  rotation: Vec<f64>,
  scale: Vec<f64>,
  translation: Vec<f64>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct T13 {
  rotation: Vec<f64>,
  scale: Vec<f64>,
  translation: Vec<f64>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct T21 {
  rotation: Vec<f64>,
  scale: Vec<f64>,
  translation: Vec<f64>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct T29 {
  rotation: Vec<f64>,
  scale: Vec<f64>,
  translation: Vec<f64>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct T37 {
  rotation: Vec<f64>,
  scale: Vec<f64>,
  translation: Vec<f64>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct T45 {
  rotation: Option<Vec<f64>>,
  scale: Option<Vec<f64>>,
  translation: Vec<f64>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct T55 {
  rotation: Vec<f64>,
  scale: Vec<f64>,
  translation: Vec<f64>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct T63 {
  rotation: Option<Vec<f64>>,
  scale: Vec<f64>,
  translation: Vec<f64>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct T3 {
  firstperson_lefthand: Option<T5>,
  firstperson_righthand: Option<T13>,
  fixed: Option<T21>,
  ground: Option<T29>,
  gui: Option<T37>,
  head: Option<T45>,
  thirdperson_lefthand: Option<T55>,
  thirdperson_righthand: Option<T63>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct T78 {
  cullface: Option<String>,
  rotation: Option<f64>,
  texture: String,
  tintindex: Option<f64>,
  uv: Option<Vec<f64>>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct T90 {
  cullface: Option<String>,
  rotation: Option<f64>,
  texture: String,
  tintindex: Option<f64>,
  uv: Option<Vec<f64>>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct T102 {
  cullface: Option<String>,
  rotation: Option<f64>,
  texture: String,
  tintindex: Option<f64>,
  uv: Option<Vec<f64>>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct T114 {
  cullface: Option<String>,
  rotation: Option<f64>,
  texture: String,
  tintindex: Option<f64>,
  uv: Option<Vec<f64>>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct T126 {
  cullface: Option<String>,
  rotation: Option<f64>,
  texture: String,
  tintindex: Option<f64>,
  uv: Option<Vec<f64>>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct T138 {
  cullface: Option<String>,
  rotation: Option<f64>,
  texture: String,
  tintindex: Option<f64>,
  uv: Option<Vec<f64>>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct Faces76 {
  down: Option<T78>,
  east: Option<T90>,
  north: Option<T102>,
  south: Option<T114>,
  up: Option<T126>,
  west: Option<T138>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct T154 {
  angle: f64,
  axis: String,
  origin: Vec<f64>,
  rescale: Option<bool>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct TElement73 {
  __comment: Option<String>,
  faces: Faces76,
  from: Vec<f64>,
  name: Option<String>,
  rotation: Option<T154>,
  shade: Option<bool>,
  to: Vec<f64>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct TElement167 {
  children: Vec<f64>,
  color: f64,
  name: String,
  origin: Vec<f64>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct T179 {
  all: Option<String>,
  amethyst: Option<String>,
  back: Option<String>,
  bamboo: Option<String>,
  bar: Option<String>,
  bars: Option<String>,
  base: Option<String>,
  beacon: Option<String>,
  body: Option<String>,
  bottom: Option<String>,
  cactus: Option<String>,
  cactus_top: Option<String>,
  calibrated_side: Option<String>,
  candle: Option<String>,
  cocoa: Option<String>,
  content: Option<String>,
  crop: Option<String>,
  cross: Option<String>,
  dirt: Option<String>,
  down: Option<String>,
  east: Option<String>,
  edge: Option<String>,
  end: Option<String>,
  end_rod: Option<String>,
  eye: Option<String>,
  fan: Option<String>,
  fire: Option<String>,
  flower: Option<String>,
  flowerbed: Option<String>,
  flowerpot: Option<String>,
  front: Option<String>,
  glass: Option<String>,
  glow_lichen: Option<String>,
  hook: Option<String>,
  inner_top: Option<String>,
  inside: Option<String>,
  lantern: Option<String>,
  leaf: Option<String>,
  leg: Option<String>,
  lever: Option<String>,
  line: Option<String>,
  lit: Option<String>,
  lit_log: Option<String>,
  lock: Option<String>,
  log: Option<String>,
  north: Option<String>,
  obsidian: Option<String>,
  overlay: Option<String>,
  pane: Option<String>,
  particle: Option<String>,
  pattern: Option<String>,
  pitcher_bottom: Option<String>,
  pitcher_side: Option<String>,
  pitcher_top: Option<String>,
  pivot: Option<String>,
  plant: Option<String>,
  platform: Option<String>,
  portal: Option<String>,
  post: Option<String>,
  propagule: Option<String>,
  rail: Option<String>,
  round: Option<String>,
  sapling: Option<String>,
  saw: Option<String>,
  sculk_vein: Option<String>,
  side: Option<String>,
  sides: Option<String>,
  slab: Option<String>,
  south: Option<String>,
  stage_1: Option<String>,
  stage_2: Option<String>,
  stage_3_bottom: Option<String>,
  stage_3_top: Option<String>,
  stage_4_bottom: Option<String>,
  stage_4_top: Option<String>,
  stand: Option<String>,
  stem: Option<String>,
  tendrils: Option<String>,
  texture: Option<String>,
  tip: Option<String>,
  top: Option<String>,
  torch: Option<String>,
  tripwire: Option<String>,
  unlit: Option<String>,
  unsticky: Option<String>,
  up: Option<String>,
  upperstem: Option<String>,
  vine: Option<String>,
  wall: Option<String>,
  west: Option<String>,
  wood: Option<String>,
  wool: Option<String>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct Root {
  ambientocclusion: Option<bool>,
  display: Option<T3>,
  elements: Option<Vec<TElement73>>,
  groups: Option<Vec<TElement167>>,
  gui_light: Option<String>,
  parent: Option<String>,
  textures: Option<T179>,
}

"
`;

snapshot[`Serde Derive Plugin > Multiple-Files > datapack/models/item 1`] = `
"#[derive(serde::Serialize, serde::Deserialize)]
pub struct T3 {
  rotation: Vec<f64>,
  scale: Option<Vec<f64>>,
  translation: Vec<f64>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct T12 {
  rotation: Vec<f64>,
  scale: Option<Vec<f64>>,
  translation: Vec<f64>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct T21 {
  rotation: Option<Vec<f64>>,
  scale: Option<Vec<f64>>,
  translation: Option<Vec<f64>>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct T32 {
  rotation: Vec<f64>,
  scale: Option<Vec<f64>>,
  translation: Option<Vec<f64>>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct T42 {
  rotation: Option<Vec<f64>>,
  scale: Option<Vec<f64>>,
  translation: Option<Vec<f64>>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct T53 {
  rotation: Option<Vec<f64>>,
  scale: Option<Vec<f64>>,
  translation: Vec<f64>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct T63 {
  rotation: Vec<f64>,
  scale: Vec<f64>,
  translation: Vec<f64>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct T71 {
  rotation: Option<Vec<f64>>,
  scale: Option<Vec<f64>>,
  translation: Vec<f64>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct T1 {
  firstperson_lefthand: Option<T3>,
  firstperson_righthand: Option<T12>,
  fixed: Option<T21>,
  ground: Option<T32>,
  gui: Option<T42>,
  head: Option<T53>,
  thirdperson_lefthand: Option<T63>,
  thirdperson_righthand: Option<T71>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct T85 {
  texture: String,
  uv: Vec<f64>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct East89 {
  texture: String,
  uv: Vec<f64>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct North93 {
  texture: String,
  uv: Vec<f64>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct South97 {
  texture: String,
  uv: Vec<f64>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct Up101 {
  texture: String,
  uv: Vec<f64>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct West105 {
  texture: String,
  uv: Vec<f64>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct Faces83 {
  down: Option<T85>,
  east: East89,
  north: North93,
  south: South97,
  up: Up101,
  west: West105,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct TElement82 {
  faces: Faces83,
  from: Vec<f64>,
  to: Vec<f64>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct Predicate119 {
  angle: Option<f64>,
  blocking: Option<f64>,
  broken: Option<f64>,
  brushing: Option<f64>,
  cast: Option<f64>,
  charged: Option<f64>,
  filled: Option<f64>,
  firework: Option<f64>,
  level: Option<f64>,
  pull: Option<f64>,
  pulling: Option<f64>,
  throwing: Option<f64>,
  time: Option<f64>,
  tooting: Option<f64>,
  trim_type: Option<f64>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct TElement117 {
  model: String,
  predicate: Predicate119,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct T153 {
  layer0: Option<String>,
  layer1: Option<String>,
  layer2: Option<String>,
  particle: Option<String>,
  spyglass: Option<String>,
}

#[derive(serde::Serialize, serde::Deserialize)]
pub struct Root {
  display: Option<T1>,
  elements: Option<Vec<TElement82>>,
  gui_light: Option<String>,
  overrides: Option<Vec<TElement117>>,
  parent: Option<String>,
  textures: Option<T153>,
}

"
`;
